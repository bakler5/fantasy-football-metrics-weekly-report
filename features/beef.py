__author__ = "Wren J. R. (uberfastman)"
__email__ = "uberfastman@uberfastman.dev"

import json
from collections import OrderedDict
from pathlib import Path
from typing import List

import requests

from features.base.feature import BaseFeature
from utilities.constants import nfl_team_abbreviation_conversions, nfl_team_abbreviations
from utilities.logger import get_logger

logger = get_logger(__name__, propagate=False)


class BeefFeature(BaseFeature):

    def __init__(self, week_for_report: int, data_dir: Path, refresh: bool = False, save_data: bool = False,
                 offline: bool = False):
        """Initialize class, load data from Sleeper API, and combine defensive player data into team total
        """
        self.first_name_punctuation: List[str] = [".", "'"]
        self.last_name_suffixes: List[str] = ["Jr", "Jr.", "Sr", "Sr.", "I", "II", "III", "IV", "V"]

        self.tabbu_value: float = 500.0

        super().__init__(
            "beef",
            "https://api.sleeper.app/v1/players/nfl",
            week_for_report,
            data_dir,
            refresh,
            save_data,
            offline
        )

    def _get_feature_data(self):
        logger.debug("Retrieving beef feature data from the web.")

        nfl_player_data = requests.get(self.feature_web_base_url).json()
        for player_sleeper_key, player_data_json in nfl_player_data.items():

            player_full_name = player_data_json.get("full_name", "")
            # excludes defences with "DEF" as beef data for defences is generated by rolling up all players on that defense
            if (player_data_json
                    and player_data_json.get("team") is not None
                    and player_data_json.get("fantasy_positions") is not None
                    and "DEF" not in player_data_json.get("fantasy_positions")):

                # add raw player data json to raw_player_data for output and later reference
                self.raw_feature_data[player_full_name] = player_data_json

                player_beef_dict = {
                    "fullName": player_full_name,
                    "firstName": player_data_json.get("first_name").replace(".", ""),
                    "lastName": player_data_json.get("last_name"),
                    "weight": float(player_data_json.get("weight")) if player_data_json.get("weight") != "" else 0.0,
                    "tabbu": (
                            (float(player_data_json.get("weight")) if player_data_json.get("weight") != "" else 0.0)
                            / float(self.tabbu_value)
                    ),
                    "position": player_data_json.get("position"),
                    "team": player_data_json.get("team")
                }

                if player_full_name not in self.feature_data.keys():
                    self.feature_data[player_full_name] = player_beef_dict

                positions = set()
                position_types = player_data_json.get("fantasy_positions")
                if position_types and not positions.intersection(("OL", "RB", "WR", "TE")) and (
                        "DL" in position_types or "DB" in position_types):

                    if player_beef_dict.get("team") not in self.feature_data.keys():
                        self.feature_data[player_beef_dict.get("team")] = {
                            "weight": player_beef_dict.get("weight"),
                            "tabbu": player_beef_dict.get("weight") / self.tabbu_value,
                            "players": {player_full_name: player_beef_dict}
                        }
                    else:
                        weight = (
                                self.feature_data[player_beef_dict.get("team")].get("weight")
                                + player_beef_dict.get("weight")
                        )
                        tabbu = self.feature_data[player_beef_dict.get("team")].get("tabbu") + (
                                player_beef_dict.get("weight") / self.tabbu_value)

                        team_def_entry = self.feature_data[player_beef_dict.get("team")]
                        team_def_entry["weight"] = weight
                        team_def_entry["tabbu"] = tabbu
                        team_def_entry["players"][player_full_name] = player_beef_dict
            else:
                player_beef_dict = {
                    "fullName": player_full_name,
                    "weight": 0,
                    "tabbu": 0,
                }

            self.feature_data[player_full_name] = player_beef_dict

    def _get_player_beef_stats(self, player_first_name: str, player_last_name: str, player_team_abbr: str,
                               key_str: str) -> float:

        team_abbr = player_team_abbr.upper() if player_team_abbr else "?"
        cleaned_player_full_name = None
        if player_first_name and player_last_name:
            player_full_name = f"{player_first_name} {player_last_name}"
            if (any(punc in player_first_name for punc in self.first_name_punctuation)
                    or any(suffix in player_last_name for suffix in self.last_name_suffixes)):

                cleaned_player_first_name = player_first_name
                for punc in self.first_name_punctuation:
                    cleaned_player_first_name = cleaned_player_first_name.replace(punc, "").strip()

                cleaned_player_last_name = player_last_name
                for suffix in self.last_name_suffixes:
                    cleaned_player_last_name = cleaned_player_last_name.removesuffix(suffix).strip()

                cleaned_player_full_name = f"{cleaned_player_first_name} {cleaned_player_last_name}"
        else:
            if team_abbr not in nfl_team_abbreviations:
                if team_abbr in nfl_team_abbreviation_conversions.keys():
                    team_abbr = nfl_team_abbreviation_conversions[team_abbr]
            player_full_name = team_abbr

        if player_full_name in self.feature_data.keys():
            return self.feature_data[player_full_name][key_str]
        elif cleaned_player_full_name and cleaned_player_full_name in self.feature_data.keys():
            return self.feature_data[cleaned_player_full_name][key_str]
        else:
            logger.debug(
                f"Player not found: {player_full_name}. Setting weight and TABBU to 0. Run report with the -r flag "
                f"(--refresh-web-data) to refresh all external web data and try again."
            )

            self.feature_data[player_full_name] = {
                "fullName": player_full_name,
                "weight": 0,
                "tabbu": 0,
            }
            return self.feature_data[player_full_name][key_str]

    def get_player_weight(self, player_first_name, player_last_name, team_abbr) -> int:
        return int(self._get_player_beef_stats(player_first_name, player_last_name, team_abbr, "weight"))

    def get_player_tabbu(self, player_first_name, player_last_name, team_abbr) -> float:
        return round(self._get_player_beef_stats(player_first_name, player_last_name, team_abbr, "tabbu"), 3)

    def generate_player_info_json(self):
        ordered_player_data = OrderedDict(sorted(self.raw_feature_data.items(), key=lambda k_v: k_v[0]))
        with open(self.data_dir / f"{self.feature_type_str}_raw.json", mode="w", encoding="utf-8") as player_data:
            json.dump(ordered_player_data, player_data, ensure_ascii=False, indent=2)
